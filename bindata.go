// Code generated by go-bindata. DO NOT EDIT. @generated
// sources:
// banner.txt
// main.go
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bannerTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x90\x41\xca\xc2\x30\x14\x84\xf7\x3d\xc5\x1c\xa0\x74\xce\xf0\xff\x2e\x3c\x83\x50\x18\x37\x45\x0b\xa5\x85\x2a\xb8\x08\xb9\xbb\xe4\xbd\xa8\x01\x4d\x52\x98\x3e\x78\xf3\xf1\x91\x84\x80\xe1\x6f\xbd\xcd\x87\x6d\xd9\xf6\xe1\x34\x2d\xcb\xf6\x40\x8c\xa0\x00\x89\xf2\x93\xe6\xcf\x3f\xa7\x14\x42\xc1\xfe\xef\xf3\xe5\x7a\x3f\xee\xd3\xb4\xc6\x28\x89\x60\xae\x15\x48\x57\xf3\x81\x60\x0a\x07\xed\x93\x30\x16\x79\xae\xdb\x6c\x0f\x7a\xad\x44\x58\xf5\x65\x9d\x87\x2b\xdf\x62\x9f\x5b\x3a\xeb\x7e\x23\x44\xcd\x97\xb6\x56\x01\x46\xa9\x17\xc7\xf4\x1e\xc6\xd8\xdc\x83\x75\x9f\x13\x19\x2c\x11\xa0\x43\xe3\xd8\xfb\xf3\xc7\xa2\x71\xb5\x17\xf2\x0c\x00\x00\xff\xff\xa0\xb5\x02\x49\x18\x02\x00\x00")

func bannerTxtBytes() ([]byte, error) {
	return bindataRead(
		_bannerTxt,
		"banner.txt",
	)
}

func bannerTxt() (*asset, error) {
	bytes, err := bannerTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "banner.txt", size: 536, mode: os.FileMode(436), modTime: time.Unix(1537101714, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _mainGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x53\x4d\x6e\xf3\x36\x10\x5d\x8b\xa7\x98\x4f\x8b\x42\x42\x54\xaa\x49\xbb\x4a\xe1\x45\x91\x36\x40\x17\x49\x8d\x18\x68\x97\x01\x2d\x8e\x24\x26\x24\x47\x20\x47\x49\x7f\xe0\x83\xe4\x0a\x6d\x4f\x95\x93\x14\x23\xdb\xa9\x6b\x14\xdf\x8a\x3f\x33\x7c\xf3\xde\x9b\xe1\x64\xba\x67\x33\x20\x04\xe3\xa2\x52\x2e\x4c\x94\x18\x2a\x55\x94\x8e\x5a\x47\x33\x3b\x5f\xaa\xa2\xec\xbd\x19\x64\x1d\x1c\x8f\xf3\x56\x77\x14\xda\xd1\x3c\xb9\x80\x23\xe5\xd1\xb5\xc4\x74\x16\x65\xca\x14\xb1\x0d\x2e\xba\x30\x7d\x2d\x41\xca\x67\x29\xd6\x05\x97\xe8\xb2\xdd\x9a\x18\x31\x9d\x05\x83\x61\x8e\xed\x40\x5f\x76\xe4\x29\x99\xad\xc7\x85\x46\xe0\xb3\xbc\x27\x13\xb1\xfb\xfd\x79\x96\xd4\x3c\xb9\x3d\x52\xad\x54\x47\x31\x33\x58\xec\xcd\xec\x79\x6d\x78\x84\x15\x94\xed\x48\x01\x5b\x4e\x33\xc5\xc1\x9a\x38\xb4\x77\x73\x76\x5d\x5b\x2a\xd5\xcf\xb1\x5b\x2c\xa8\x6a\xf8\x43\x15\x2f\x26\x41\xa6\x38\x40\xe6\xe4\xe2\xa0\x8a\xde\x79\x8c\x26\x20\x5c\xaf\xa0\xd4\x07\xca\x9a\x7f\x15\x3a\x2e\xff\x10\x85\xa0\x95\x20\xa7\x19\xe5\xea\x46\x68\x9f\xdf\x2b\x00\x00\xb1\x52\x6f\x16\xdc\x9f\x4d\xaa\xbe\x90\x3a\x0d\x94\xb2\x94\x0d\x94\xe5\x61\x0f\x52\xae\xac\x55\xb1\xe4\xaf\x4d\xca\x58\xd5\xaa\x90\xd0\x22\xe7\x7a\x05\xff\x91\x77\xb1\x27\x7c\x01\xa5\x5e\x0c\x57\x85\xeb\xe1\xb1\x01\x4c\x49\x72\x29\xeb\x0d\x1b\xae\x8e\xef\xeb\x6f\x97\xc8\x6a\x05\xd1\x79\x91\x5c\x60\x4a\xf4\x80\x99\x29\x2d\x2a\xef\xe6\xcc\xdf\xe5\x8c\x5c\x95\x27\x6a\x6b\x55\x08\xee\x69\xee\xa7\x7f\x21\x8a\x3e\xb0\x5e\x27\x17\xd9\xc7\xaa\xec\x6d\x9f\x6d\xbf\x3c\xd9\xa9\xa2\x68\x5b\x76\x01\xf5\xc6\x23\x4e\xd5\x7e\x8b\x1d\x45\x5b\x43\xdb\x42\xa6\x80\x3c\xba\x38\x40\x10\xcc\x29\x91\x9d\x3b\x76\x2f\x08\x23\x26\x94\xa2\xb1\x81\xc7\x83\x90\x9f\x26\x8c\xd5\xb1\x23\x02\x7f\x5a\x56\xce\x07\xc2\x3f\x46\xc7\xd5\xc7\xfc\xe8\x7b\x7c\xbd\x39\x1e\x36\x6c\x69\xe6\xaa\x6e\xe0\xa3\x7b\xb2\x3d\xed\x5a\x03\x2e\xfe\x1f\x78\x16\x16\x87\x51\x13\x4f\x13\xdf\xe3\x6b\x75\x6a\x3e\x44\x7a\x85\xc9\x9b\xdf\x5c\x1c\xb4\xd6\xf0\xfe\xf6\x27\xbc\xbf\xfd\x05\xef\x6f\x7f\xc3\x62\x87\x2a\x96\x09\x13\x09\xa2\x6a\x05\xfb\x8f\xa6\x1f\xd0\xd8\x5b\xe7\xb1\xfa\x4c\x63\xe5\xbd\xc5\xae\x01\x6b\xd8\x1c\x3c\x39\xfc\x32\xfd\x3d\x76\x64\xf1\x76\xf6\x7e\xb1\xa7\x56\xaa\x28\x84\x07\xa6\xa3\x79\x4c\x62\xc3\x7a\xb9\xab\x2c\x76\x7a\x63\xc2\xe4\xf1\xc1\x30\x36\x20\xe7\x9b\x51\xbc\xf3\xb9\x81\xab\x06\x2e\xbf\xba\xfa\xa6\xfe\xc0\xd0\xbf\x24\xc7\x58\x49\xdd\xc5\x07\xbd\x61\x9a\xc4\x92\x1d\xa0\xcf\xb8\x4c\xc0\xa9\x59\x47\xda\x7b\xfe\x1d\xcd\xde\x42\x24\x86\x2d\x42\x4f\x73\xb4\xf0\x49\xc4\xec\xd4\xee\x9f\x00\x00\x00\xff\xff\xf0\xb7\xd8\xe4\x83\x04\x00\x00")

func mainGoBytes() ([]byte, error) {
	return bindataRead(
		_mainGo,
		"main.go",
	)
}

func mainGo() (*asset, error) {
	bytes, err := mainGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "main.go", size: 1155, mode: os.FileMode(436), modTime: time.Unix(1537109124, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"banner.txt": bannerTxt,
	"main.go": mainGo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"banner.txt": &bintree{bannerTxt, map[string]*bintree{}},
	"main.go": &bintree{mainGo, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

